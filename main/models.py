import json

from django.contrib.auth.models import User
from django.db import models
from django.utils import timezone


# Create your models here.
class Point(models.Model):
    x_value = models.FloatField()
    y_value = models.FloatField()

    def __str__(self):
        return f"{self.x_value}, {self.y_value}"

class Table(models.Model):
    title = models.TextField(default="Untitled")
    solution = models.TextField(default="")
    points = models.ManyToManyField(Point, related_name="tables")
    temperature = models.FloatField()
    author = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="tables",
        verbose_name="–ê–≤—Ç–æ—Ä",
        null=True,
        blank=True
    )

    def __str__(self):
        return self.title


class CalculationResult(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="calculations")
    title = models.CharField(max_length=200, default="–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞")
    param_a = models.FloatField()
    param_b = models.FloatField()

    # –Ω–µ –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ!
    table = models.ForeignKey(
        'Table',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="results"
    )

    created_at = models.DateTimeField(auto_now_add=True)
    iterations = models.IntegerField(null=True, blank=True, verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π")
    exec_time = models.FloatField(null=True, blank=True, verbose_name="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)")
    algorithm = models.CharField(max_length=100, null=True, blank=True, verbose_name="–ê–ª–≥–æ—Ä–∏—Ç–º")
    average_op = models.FloatField(null=True, blank=True, verbose_name="–°—Ä–µ–¥–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (%)")

    # —Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
    table_data = models.TextField(null=True, blank=True, verbose_name="–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")

    def get_table_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (snapshot)."""
        if self.table_data:
            try:
                return json.loads(self.table_data)
            except json.JSONDecodeError:
                return self.table_data
        return None

    def __str__(self):
        return f"Calculation #{self.id} by {self.user.username}"



from cloudinary_storage.storage import MediaCloudinaryStorage

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    avatar = models.ImageField(
        storage=MediaCloudinaryStorage(),
        upload_to='avatars/',
        null=True,
        blank=True
    )

    def __str__(self):
        return f"Profile of {self.user.username}"

from cloudinary_storage.storage import MediaCloudinaryStorage

from cloudinary_storage.storage import MediaCloudinaryStorage
from django.utils import timezone
from django.contrib.auth.models import User
from django.db import models


class Post(models.Model):
    SOURCE_CHOICES = [
        ('forum', '–°–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é –Ω–∞ —Ñ–æ—Ä—É–º–µ'),
        ('calculation', '–°–æ–∑–¥–∞–Ω –∏–∑ —Ä–∞—Å—á—ë—Ç–∞'),
    ]

    title = models.CharField(max_length=200, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    content = models.TextField(verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="posts", verbose_name="–ê–≤—Ç–æ—Ä")
    created_at = models.DateTimeField(default=timezone.now, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    image = models.ImageField(
        storage=MediaCloudinaryStorage(),
        upload_to="post_images/",
        null=True,
        blank=True,
        verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )

    calculation_result = models.ForeignKey(
        'CalculationResult',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞"
    )

    # üëá –ù–æ–≤–æ–µ –ø–æ–ª–µ ‚Äî snapshot (–∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–∞)
    calculation_snapshot = models.JSONField(null=True, blank=True, verbose_name="–ö–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–∞")

    algorithm = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ê–ª–≥–æ—Ä–∏—Ç–º")
    a12 = models.CharField(max_length=50, blank=True, null=True, verbose_name="A12")
    a21 = models.CharField(max_length=50, blank=True, null=True, verbose_name="A21")
    iterations = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ò—Ç–µ—Ä–∞—Ü–∏–∏")
    exec_time = models.CharField(max_length=50, blank=True, null=True, verbose_name="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    average_error = models.CharField(max_length=50, blank=True, null=True, verbose_name="–°—Ä–µ–¥–Ω—è—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å")

    source = models.CharField(
        max_length=20,
        choices=SOURCE_CHOICES,
        default='forum',
        verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫"
    )

    class Meta:
        verbose_name = "–ü–æ—Å—Ç"
        verbose_name_plural = "–ü–æ—Å—Ç—ã"

    def __str__(self):
        return self.title

    @property
    def is_from_calculation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–Ω –ª–∏ –ø–æ—Å—Ç –∏–∑ —Ä–∞—Å—á—ë—Ç–∞."""
        return self.source == 'calculation'

class Comment(models.Model):
    post = models.ForeignKey(
        Post,
        on_delete=models.CASCADE,
        related_name='comments',
        verbose_name="–ü–æ—Å—Ç"
    )
    author = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='comments',
        verbose_name="–ê–≤—Ç–æ—Ä"
    )
    content = models.TextField("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", max_length=1000)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        verbose_name = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        verbose_name_plural = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
        ordering = ['-created_at']

    def __str__(self):
        return f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.author.username} –∫ '{self.post.title}'"
